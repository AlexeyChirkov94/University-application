#common
id = Id
name = Название
first.name = Имя
last.name = Фамилия
email = Эл. почта
email.address = Адрес эл. почты
password = Пароль
more = Подробнее
departments = Факультеты
courses = Курсы
groups = Группы
professors = Профессора
students = Студенты
lessons = Уроки
forms.of.lesson = Формы уроков
forms.of.education = Формы обучения
science.degrees = Научные степени
department = Факультет
course = Курс
group = Группа
professor = Профессор
student = Студент
lesson = Урок
form.of.lesson = Форма урока
form.of.education = Форма обучения
science.degree = Научная степень
edit = Изменить
delete = Удалить
go.to = Перейти
go.back = Вернуться назад
try.again = Попробуйте снова
previous.page = Предыдущая
next.page = Следующая
ru = Рус
en = Англ
login = Вход
sign.in = Войти
sign.up = Регистрация
with = c
management = Управление
current.departments = Текущие факультеты
current.courses = Текущие курсы
current.groups = Текущие группы
current.professors = Текущие профессора
current.teachers = Текущие преподаватели
current.students = Текущие студенты
current.lessons = Текущие уроки
current.forms.of.lesson = Текущие формы урока
current.forms.of.education = Текущие формы обучения
current.science.degrees = Текущие научные степени
current.department = Текущий факультет
current.course = Текущий курс
current.group = Текущая группа
current.professor = Текущий профессор
current.teacher = Текущий преподаватель
current.student = Текущий студент
current.lesson = Текущий урок
current.form.of.lesson = Текущая форма урока
current.form.of.education = Текущая форма обучения
current.science.degree = Текущая научная степень
common.information = Общая информация
enter.first.name = Введите имя
enter.last.name = Введите фамилию
enter.email = Введите адрес эл. почты
enter.password = Введите пароль
date.and.time = Дата и время
teacher = Преподаватель
show.timetable = Показать расписание
note = Примечание

#errors
error.creating = Ошибка при создании
error.entity.already.exist = Объект уже существует
error.entity.not.exist = Объект не существует
error.incompatibility.course.and.professor = Вы можете назначить только учителя или предмет, \
  позже в меню изменения урока вы увидите только те предметы или преподавателей которые могут быть назначены вместе
error.timetable.without.group = Студент не может посещать уроки если не состоит в группе
error.404.title = Ошибка 404
error.404.description = Страница, которую вы ищете, не найдена
error.500.title = Что-то пошло не так
error.500.description = Наши инженеры уже работают над этим

#header
lang = Язык
main = Главная
about = О приложении
used.technologies = Технологии проекта

#sidebar
project.name = Мой университет
show.all = Показать все
add.new = Добавить
account = Аккаунт
profile = Профиль
settings = Настройки
sign.out = Выход

#footer
project.git.repository = Гит репозиторий проекта
author = Сделано Чирковым Алексеем под руководством школы Foxminded

#main
page.main.paragraph.one.header = Мой университет
page.main.paragraph.one.line.one = Привет, меня зовут Алексей Чирков.
page.main.paragraph.one.line.two = Перед вами мой учебный проект.
page.main.paragraph.one.line.three = Это CRUD приложение, которое позволяет оцифровать процесс обучения в университете.
page.main.paragraph.one.line.four = Если вы хотите изучить приложение самостоятельно, вы можете войти в систему как студент, используя электронную почту: 
page.main.paragraph.one.line.five = "student@gmail.com" и пароль: "student". Студент не имеет прав на изменение или 
page.main.paragraph.one.line.six = удаление чего-то, но может видеть все страницы.

page.main.paragraph.two.header = Приложение состоит из трех слоев:
page.main.paragraph.two.line.one = Первый слой — это DAO слой. Он отвечает за работу с базой данных. 
page.main.paragraph.two.line.two = Сейчас он использует Spring Data JPA, но в начале он работал с JdbcTemplate и прямыми SQL запросами к базе данных. 
page.main.paragraph.two.line.three = Полную история создания приложения вы можете найти на вкладке 
page.main.paragraph.two.line.four = Второй слой – это слой сервиса. Он отвечает за внутреннюю логику приложения, 
page.main.paragraph.two.line.five = back-end валидацию, управление транзакциями и получение данных через слой DAO.
page.main.paragraph.two.line.six = Третий слой – это слой пользовательского интерфейса. Он отвечает за получение HTTP запросов от пользователя и сопоставление их с соответствующими отображениями (HTML страницами). 
page.main.paragraph.two.line.seven = Логика этого слоя построена в соответствии с REST архитектурой.

page.main.paragraph.three.header = UML диаграмма приложения

#about
page.about.header = О приложении "Мой университет"...

department.class = Класс Факультет
department.class.show = Показать факультет
department.class.edit = Изменить факультет
department.class.description = Как уже упоминалось на главной вкладке, это CRUD приложение, которое позволяет оцифровать \
  процесс обучения в университете. На вершине иерархии классов находится класс факультет. Этот класс содержит информацию о курсах, \
  преподаваемых на этом факультете, о группах, обучающихся на этом факультете, и профессорах, преподающих на этом факультете. \
  Конечно, вы можете изменить любую информацию об этом факультете. Ниже приложены два отображения этого класса. \
  Сначала отображение просмотра, а затем часть отображение редактирования.

course.class = Класс Курс
course.class.show = Показать курс
course.class.edit = Изменить курс
course.class.description = Следуя порядку иерархии классов, следующим рассматриваемым классом является курс. \
  Этот класс содержит ссылку на факультет, к которому он принадлежит и список профессоров, которые могут преподавать этот курс. \
  Ниже также приложены два отображения этого класса. Сначала отображение просмотра, а затем часть отображение редактирования.

professor.class = Класс Профессор
professor.class.show = Показать профессора
professor.class.edit = Изменить профессора
professor.class.timetable = Расписание профессора
professor.class.description = Следующим рассматриваемым классом является класс профессора. Профессор, как и студент, наследуется от класса пользователь. \
  Помимо собственных полей, таких как Имя, Фамилия, электронная почта и пароль, он содержит ссылку на кафедру, к которой он принадлежит, список курсов, \
  которые он может преподавать, и научную степень. (тип Enum). Кроме того, из отображения профессора пользователь может запросить расписание \
  текущего профессора. Ниже приложены три отображения этого класса. Первое — отображение просмотра, следующее — отображение редактирования, \
  последнее — отображение просмотра расписания преподавателя

student.class = Класс Студент
student.class.show = Показать студента
student.class.edit = Изменить студента
student.class.timetable = Расписание студента
student.class.description = Еще одним пользователем приложения, помимо профессора, является студент. У него те же общие поля, \
  что и у профессора, и, кроме того, ссылка на его группу. Ниже также, приложены три отображения этого класса. \
  Первое — отображение просмотра, следующее — отображение редактирования, последнее — отображение просмотра расписания студента.

group.class = Класс Группа
group.class.show = Показать группу
group.class.edit = Изменить группу
group.class.timetable = Расписание группы
group.class.description = В моем приложении ученик может посещать уроки только в составе группы. Группа содержит ссылку на факультет, \
  к которому она относится, форму обучения (очная, заочная, вечерняя) и список студентов, входящих в эту группу. Ниже также, приложены \
  три отображения этого класса. Первое — отображение просмотра, следующее — отображение редактирования, последнее — отображение просмотра \
  расписания группы. (то же, что и для студента).

lesson.class = Класс Урок
lesson.class.show = Показать урок
lesson.class.edit = Изменить урок
lesson.class.description = И, наконец, урок. Этот класс содержит дату и время начала урока и ссылки на курс, которому посвящен урок, \
  профессора, который ведет этот курс, форму урока (лекция, практика и т. д.) и группу, которая занимается в этот урок. \
  Ниже приложены два отображения этого класса. Сначала отображение просмотра, а затем отображение редактирования.

forms.of.lesson.and.education.description = Здесь нет описания классов «форма урока» и «форма обучения», это простые классы, \
  которые содержат только название и ID.

#used technologies
page.history.header = Использованные технологии / История приложения
this.commit = Этот коммит
technologies = Технологии

commit.one.description = Прежде всего, прежде чем написать первую строчку кода, я создал UML-диаграмму приложения. \
  И только следующим шагом было написание кода. Классы entity стали первыми классами приложения. \
  В результате UML диаграмма и классы entity были моим первым мерж-реквестом. Я пишу мерж-реквест, а не пулл-реквест, \
  потому, что когда я учился, мы использовали GitLab.

commit.two.description = Следующий коммит приложения назывался «DAO layer added». В этом коммите я добавил к приложению \
  классы DAO и написал небольшой консольный класс FrontController, чтобы увидеть, как работает приложение. На данный момент классы \
  DAO работают с Spring JdbcTemplate и прямыми SQL запросами к базе данных. Также в этом коммите я написал тесты для всех \
  классов DAO и класса FrontController. Для тестов классов DAO я использовал базу данных H2. И в целом на протяжении всего \
  написания приложения уровень покрытия тестами не опускался ниже 95% (без учета классов Entity и DTO). \
  Тестовое покрытие я проверял с помощью плагина JaCoCo.

commit.three.description = В следующем мерж-реквесте я добавил сервисный слой в приложение. Сервисный слой уже не \
  работает с неизменяемыми классами entity. Он работает с изменяемыми классами DTO. Из-за этого я написал мапперы, \
  которые конвертируют классы DTO в Entity и обратно. Чтобы протестировать сервисный слой отдельно от слоя DAO, \
  я создал моки классов DAO. Для этой задачи я использовал фреймворк Mockito.

commit.four.description = Далее, я добавил Lombok в свое приложение. Это позволило мне удалить более 2000 строк кода. \
  Я удалил все написанные вручную геттеры, сеттеры, конструкторы, билдеры, переопределения иквел и хэш-кода. \
  Я до сих пор помню, как приятно было удалять шаблонный код.

commit.five.description = На следующем этапе я познакомился с Docker. \
  В этом коммите я использую Docker только для запуска моей базы данных в контейнере.

commit.six.description = Следующие несколько коммитов я добавлял веб-интерфейс пользователя. Один или два контроллера в одном коммите. \
  Правая ссылка направит вас к последнему коммиту этой группы. На этом этапе я не использовал Spring Boot, вместо него использовал Spring MVC. \
  Для передачи данных приложения в web я использовал Thymeleaf. Кроме того, я использовал шаблоны Bootstrap, чтобы интерфейс выглядел лучше.

commit.seven.description = Далее я добавил интернационализацию. \
  Благодаря этому вы можете читать этот текст и изучать все приложение на двух языках.

commit.eight.description = После этого мой наставник познакомил меня с MapStruct. \
  И я переписал все мапперы на этой технологии.

commit.nine.description = На следующем этапе я работал с безопасностью своего приложения. Для этой задачи я, конечно же, \
  использовал Spring Security. Я создал дополнительные таблицы в своей базе данных, которые содержат информацию о ролях \
  пользователей и привилегиях этих ролей. В моем приложении пользователи разделены по правам на три типа. Роль студента имеет \
  привилегии только на чтение. Роль профессора также имеет письменные привилегии. Роль администратора имеет дополнительные привилегии на удаление.

commit.ten.description = Далее я разделил свой проект на четыре модуля. Это модули: data, client, service и UI. \
  Модуль data посвящен работе с базой данных. Модуль client содержит интерфейсы классов сервиса и классов DTO, \
  этот модуль был задуман как контракт, который необходимо реализовать для работы с модулем data. \
  Модуль service просто реализует контракт, объявленный в модуле client. И, наконец, модуль UI, который содержит \
  контроллеры и представления для взаимодействия с пользователем.

commit.eleven.description = В следующий раз я сделал несколько вещей. Во-первых, я добавил дополнительный модуль под \
  названием покрытие, просто чтобы увидеть уровень тестового покрытие с помощью JaCoCo. Во-вторых, я поместил приложение \
  в два докер контейнера. В один контейнер я поместил свою базу данных, во второй я поместил war файл приложения. \
  Третье, что я сделал, это получил data source данных через JNDI.

commit.twelve.description = Следующим шагом был переход с Spring-JDBC на Hibernate. Это может показаться странным, \
  но я не получил ожидаемого удовольствия. Hibernate берет на себя многое и иногда найти баг сложнее, чем в старом добром Spring-JDBC.

commit.thirteen.description = Продолжая сокращать количество строк кода в приложении, следующим шагом был переход с Spring-MVC \
  на Spring-Boot. Это было действительно круто.

commit.fourteen.description = Следующим шагом был переход с Hibernate на Spring Data JPA и добавление многоуровневого \
  jar-файла в докер. Контейнер стал запускаться заметно быстрее.

commit.fifteen.description = На следующем шаге я заполнил веб страницы приложения текстами. И развернул его на \
  Amazon Web Service. К сожалению, я не знаю, примет ли этот иностранный сервис мою карту Visa в следующем месяце, \
  поэтому приложение, вероятно, уже развернуто в Yandex Cloud.

commit.sixteen.description = В качестве последнего шага я планирую изменить бэк-энд валдиацию с ручного перехвата \
  исключений и перенаправления на страницу ошибок на Hibernate validation bean.

#login
please.sign.in = Пожалуйста, войдите
help.to.login = Вы можете войти в систему как студент, используя электронную почту: «student@gmail.com» и пароль: «student». \
  Студент имеет права только на чтение
invalid.email.or.password = Неверный адрес эл. почты или пароль

#registration
i.am.student = Я - студент
i.am.professor = Я - профессор
start.registration = Зарегистрироваться

#departments
all.departments = Все факультеты
professors.of.department = Профессора факультета
courses.of.department = Курсы факультета
groups.of.department = Группы факультета
department.delete.warning = Будьте осторожны! Все профессора этого факультета потеряют их факультет, аналогично курсы и группы!
update.of.department = Обновление факультета
update.department = Обновить факультет
name.of.department = Название факультета
enter.new.department.name = Введите новое название факультета
choose.professor.for.adding.to.department = Выберите профессора для добавления в факультет
add.professor.to.department = Добавить профессора в факультет
choose.professor.for.removing.from.department = Выберите профессора для удаления из факультета
remove.professor.from.department = Удалить профессора из факультета
choose.course.for.adding.to.department = Выберите курс для добавления в факультет
add.course.to.department = Добавить курс в факультет
choose.course.for.removing.from.department = Выберите курс для удаления из факультета
remove.course.from.department = Удалить курс из факультета
choose.group.for.adding.to.department = Выберите группу для добавления в факультет
add.group.to.department = Добавить группу в факультет
choose.group.for.removing.from.department = Выберите группу для удаления из факультета
remove.group.from.department = Удалить группу из факультета
registration.new.department = Регистрация нового факультета
enter.name.new.department = Введите название нового факультета
add.new.department = Добавить новый факультет
department.have.no.professors = Этот факультет пока не имеет профессоров
department.have.no.courses = Этот факультет пока не имеет курсов
department.have.no.groups = Этот факультет пока не имеет групп

#courses
all.courses = Все курсы
teachers.of.course = Преподаватели курса
course.delete.warning = Будьте осторожны! Все уроки этого курса потеряют свой предмет
update.of.course = Обновление курса
update.course = Обновить курс
name.of.course = Название курса
enter.new.course.name = Введите новое название курса
department.of.course = Факультет курса
choose.professor.for.adding.to.course = Выберите профессора для добавления в преподаватели курса
add.professor.to.course = Добавить профессора в преподаватели курса
choose.professor.for.removing.from.course = Выберите профессора для удаления из преподавателей курса
remove.professor.from.course = Удалить профессора из преподавателей курса
registration.new.course = Регистрация нового курса
enter.name.new.course = Введите название нового курса
add.new.course = Добавить новый курс
choose.department.of.new.course = Выберите факультет нового курса
course.have.no.teachers = Этот курс пока не имеет преподавателей

#groups
all.groups = Все группы
timetable.for.group = Расписание для группы
students.of.group = Студенты группы
group.delete.warning = Будьте осторожны! Все студенты будут удалены из группы, а уроки этой группы потеряют группу
update.of.group = Обновление группы
update.group = Обновить группу
name.of.group = Название группы
enter.new.group.name = Введите новое название группы
department.of.group = Факультет группы
form.of.education.of.group = Форма обучения группы
choose.student.for.adding.to.group = Выберите студента для добавления в группу
add.student.to.group = Добавить студента в группу
choose.student.for.removing.from.group = Выберите студента для удаления из группы
remove.student.from.group = Удалить студента из группы
registration.new.group = Регистрация новой группы
enter.name.new.group = Введите название новой группы
choose.form.of.education.of.new.group = Выберите форму обучения новой группы
choose.department.of.new.group = Выберите факультет новой группы
add.new.group = Добавить новую группу
group.have.no.students = Эта группа пока не имеет студентов

#professors
all.professors = Все профессора
timetable.for.professor = Расписание для профессора
professor.delete.warning = Будьте осторожны! Все уроки преподаваемые этим профессором останутся без учителя
courses.of.professor = Курсы профессора
update.of.professor = Обновление данных о профессоре
enter.new.professor.first.name = Введите новое имя профессора
enter.new.professor.last.name = Введите новую фамилию профессора
enter.new.professor.email = Введите новый адрес эл. почты профессора
enter.new.professor.password = Введите новый пароль профессора
first.name.of.professor = Имя профессора
last.name.of.professor = Фамилия профессора
email.of.professor = Адрес эл. почты профессора
password.of.professor = Пароль профессора
science.degree.of.professor = Научная степень профессора
department.of.professor = Факультет профессора
update.professor = Обновить информацию о профессоре
course.list.of.professor = Список курсов профессора
current.course.list = Текущий список курсов профессора
choose.course.for.adding.to.list = Выберите курс для добавления в список курсов профессора
add.course.to.list = Добавить курс в список курсов профессора
choose.course.for.removing.from.list = Выберите курс для удаления из списка курсов профессора
remove.course.from.list = Удалить курс из списка курсов профессора
registration.new.professor = Регистрация нового профессора
choose.department.of.new.professor= Выберите факультет нового профессора
choose.science.degree.of.new.professor = Выберите научную степень нового профессора
add.new.professor = Зарегистрировать нового профессора
professor.have.no.courses = Этот профессор пока не имеет курсов для преподавания

#students
all.students = Все студенты
timetable.for.student = Расписание для студента
update.of.student = Обновление данных о студенте
enter.new.student.first.name = Введите новое имя студента
enter.new.student.last.name = Введите новую фамилию студента
enter.new.student.email = Введите новый адрес эл. почты студента
enter.new.student.password = Введите новый пароль студента
first.name.of.student = Имя студента
last.name.of.student = Фамилия студента
email.of.student = Адрес эл. почты студента
password.of.student = Пароль студента
group.of.student = Группа студента
update.student = Обновить информацию о студенте
exclude.student.from.group = Исключить студента из группы
registration.new.student = Регистрация нового студента
choose.group.of.new.student = Выберите новую группу нового студента
add.new.student = Зарегистрировать нового студента

#lessons
all.lessons = Все уроки
update.of.lesson = Обновление урока
enter.new.date.and.time.of.start.lesson = Введите новую дату и время начала урока
date.time.of.start.lesson = Дата и время начала урока
course.of.lesson = Курс урока
group.of.lesson = Группа урока
teacher.of.lesson = Преподаватель урока
from.of.lesson = Форма урока
update.lesson = Обновить информацию об уроке
registration.of.new.lesson = Регистрация нового урока
enter.date.and.time.of.start.new.lesson = Введите дату и время нового урока
choose.course.of.new.lesson = Выберите курс нового урока
choose.group.of.new.lesson = Выберите группу нового урока
choose.professor.of.new.lesson = Выберите преподавателя нового урока
choose.form.of.new.lesson = Выберите форму нового урока
add.new.lesson = Зарегистрировать новый урок

#form of lesson
all.forms.of.lesson = Все формы уроков
duration = Продолжительность
form.of.lesson.delete.warning = Будьте осторожны! Все уроки с этой формой урока потеряют свою форму урока
update.of.form.of.lesson = Обновление формы урока
name.of.form.of.lesson = Название формы урока
enter.new.name.of.form.of.lesson = Введите новое название формы урока
duration.of.form.of.lesson = Продолжительность формы урока
enter.new.duration.of.form.of.lesson = Введите новую продолжительность формы урока (в минутах)
update.forms.of.lesson = Обновить форму урока
registration.new.form.of.lesson = Регистрация новой формы урока
enter.name.of.new.form.of.lesson = Введите название новой формы урока
enter.duration.of.new.form.of.lesson = Введите продолжительность новой формы урока (в минутах)
add.new.form.of.lesson = Зарегистрировать новую форму урока

#form of education
all.forms.of.education = Все формы обучения
groups.of.current.form.of.education = Группы с этой формой обучения
form.of.education.delete.warning = Будьте осторожны! Все группы с этой формой обучения потеряют свою форму обучения
update.of.form.of.education = Обновление формы обучения
name.of.form.of.education = Название формы обучения
enter.new.name.of.form.of.education = Введите новое название формы обучения
update.forms.of.education = Обновить форму обучения
choose.group.for.adding.to.form.of.education = Выберите группу для добавления к этой форме обучения
add.group.to.form.of.education = Добавить группу в форму обучения
choose.group.for.removing.from.form.of.education = Выберите группу для удаления из этой формы обучения
remove.group.from.form.of.education = Удалить группу из формы обучения
registration.new.form.of.education = Регистрация новой формы обучения
enter.name.of.new.form.of.education = Введите название новой формы обучения
add.new.form.of.education = Зарегистрировать новую форму обучения
form.of.education.have.no.groups = Эта форма обучения пока не имеет групп