#common
id = Id
name = Name
first.name = First name
last.name = Last name
email = Email
email.address = Email address
password = Password
more = More
departments = Departments
courses = Courses
groups = Groups
professors = Professors
students = Students
lessons = Lessons
forms.of.lesson = Forms of Lesson
forms.of.education = Forms of Education
science.degree = Science degree
department = Department
course = Course
group = Group
professor = Professor
student = Student
lesson = Lesson
form.of.lesson = Form of Lesson
form.of.education = Form of Education
science.degrees = Science degrees
edit = Edit
delete = Delete
go.to = Go to
go.back = Go back
try.again = Try again
previous.page = Previous
next.page = Next
ru = Ru
en = En
login = Login
sign.in = Sign-in
sign.up = Sign-up
with = with
management = Management
current.departments = Current departments
current.courses = Current courses
current.groups = Current groups
current.professors = Current professors
current.teachers = Current teachers
current.students = Current students
current.lessons = Current lessons
current.forms.of.lesson = Current forms of lesson
current.forms.of.education = Current forms of education
current.science.degrees = Current science degrees
current.department = Current department
current.course = Current course
current.group = Current group
current.professor = Current professor
current.teacher = Current teacher
current.student = Current student
current.lesson = Current lesson
current.form.of.lesson = Current form of lesson
current.form.of.education = Current form of education
current.science.degree = Current science degree
common.information = Common information
enter.first.name = Enter first name
enter.last.name = Enter last name
enter.email = Enter email
enter.password = Enter password
date.and.time = Date & Time
teacher = Teacher
show.timetable = Show timetable
note = Note

#errors
error.creating = Creating error
error.entity.already.exist = Entity already exist
error.entity.not.exist = Entity don`t exist
error.incompatibility.course.and.professor = You can appoint only teacher or course, \
  after that in lesson update menu, you will find only those courses or professors witch can be appoint together.
error.timetable.without.group = Student can`t attend lessons without a group
error.404.title = Error 404
error.404.description = Sorry, the page you were looking not found
error.500.title = Something went wrong
error.500.description = Our Engineers are on it

#header
lang = Lang
main = Main
about = About
used.technologies = Used technologies

#sidebar
project.name = My university
show.all = Show all
add.new = Add new
account = Account
profile = Profile
settings = Settings
sign.out = Sign out

#footer
project.git.repository = Project git repository
author = Made by Chrikov Alexey under the supervision of Foxminded school

#main
page.main.paragraph.one.header = My University
page.main.paragraph.one.line.one = Hello, my name is Alexey Chirkov.
page.main.paragraph.one.line.two = You see my pet project.
page.main.paragraph.one.line.three = This is CRUD application, which allow digitalize university studying process.
page.main.paragraph.one.line.four = If you want to explore the app on your own, you can log in as a student using email: 
page.main.paragraph.one.line.five = "student@gmail.com" and password: "student". Student have no rights to change or 
page.main.paragraph.one.line.six = remove something, but can see all pages.

page.main.paragraph.two.header = The application contains of three layers:
page.main.paragraph.two.line.one = First layer is DAO layer. It is responsible for receiving data from database. 
page.main.paragraph.two.line.two = Now it uses Spring Data JPA. But it started with JdbcTemplate and direct SQL queries to the database. 
page.main.paragraph.two.line.three = Full history of application creation you can find on tab 
page.main.paragraph.two.line.four = Second layer is Service layer. It is responsible for the internal logic of the application, 
page.main.paragraph.two.line.five = back-end validation, transaction management, and receiving data via DAO layer.
page.main.paragraph.two.line.six = Third layer is UI layer. It is responsible for receiving HTTP requests from users and map them to relevant view (HTML page). 
page.main.paragraph.two.line.seven = The UI layer logic follows the REST architecture.

page.main.paragraph.three.header = UML diagram of application

#about
page.about.header = About application "My University"...

department.class = Department class
department.class.show = Show department
department.class.edit = Edit department
department.class.description = As already mentioned on the home tab this is CRUD application, which allow digitalize \
  university studying process. On the top of the class hierarchy is the department class. This class contains information \
  about the courses taught at this department, groups studying at this department and professors teaching at this department. \
  Of course, you can change any information about the department. Below attached are two views of this class. First is show view, \
  next is part of edit view.

course.class = Course class
course.class.show = Show course
course.class.edit = Edit course
course.class.description = Following the order of the class hierarchy, the next class under consideration is the class Course. \
  This class contains a link to the department to which it belongs and a list of professors who can teach this course. \
  Below also attached are two views of this class. First is show view, next is edit view.

professor.class = Professor class
professor.class.show = Show professor
professor.class.edit = Edit professor
professor.class.timetable = Timetable of professor
professor.class.description = The next class under consideration is the class Professor. The professor, like the student, \
  inherits from the user class. In addition to its own fields, such as First Name, Last Name, email and password, \
  it contains a link to the department to which it belongs, a list of courses that it can teach, and science degree. \
  (Enum type). Also, from professor view user can request timetable of current professor. Below also attached are three \
  views relate of this class. First is show view, next is part of edit view, and last is professor timetable view.

student.class = Student class
student.class.show = Show student
student.class.edit = Edit student
student.class.timetable = Timetable of student
student.class.description = Another user of the application, in addition to the professor, is a student. He has the same common \
  fields as the professor and in addition a link to his group. Below also attached are three views relate of this class. \
  First is show view, next is edit view, and last is student timetable view.

group.class = Group class
group.class.show = Show group
group.class.edit = Edit group
group.class.timetable = Timetable of group
group.class.description = Within my application, a student can attend lessons only as part of a group. \
  The group contains a link to the department to which it belongs, the form of education (full-time, distance, evening) \
  and a list of students included in this group. Below also attached are three views relate of this class. \
  First is show view, next is edit view, and last is group timetable view (same as student).

lesson.class = Lesson class
lesson.class.show = Show lesson
lesson.class.edit = Edit lesson
lesson.class.description = And finally, the lesson. This class contains the date and time of the beginning of the lesson and links \
  to the course to which the lesson is dedicated, the professor who teaches this course, the form of lesson (lecture, practice etc.) \
  and the group that is studying in this lesson. Below also attached are two views relate of this class. First is show view, next is  edit view.

forms.of.lesson.and.education.description = There is no description of classes "form of the lesson" and "form of education", \
  these are simple classes that contain only the name and ID.

#used technologies
page.history.header = Used Technologies / History of application
this.commit = This commit
technologies = Technologies

commit.one.description = First of all, before writing the first line of code, I created a UML diagram of the application. \
  Only next step was writing code. Entity classes became the first classes of application. \
  As a result, UML diagram and entity classes was my first merge request. I write a merge request, \
  not a pull request, because when I was studying, we used GitLab.

commit.two.description = The next commit of application was called "DAO layer added". In this commit, \
  I added to application DAO classes, and wrote small console FrontController class to see how application works. \
  At this moment, DAO classes work with Spring JdbcTemplate and direct SQL queries to database. Also in this commit \
  I have write tests to all DAO classes and, and FrontController class. For tests DAO classes, I used H2 database. \
  And in general, throughout the entire writing of the application, the level of test coverage did not fall below 95% \
  (exclude Entity and DTO classes). Test coverage I checking with JaCoCo plugin.

commit.three.description = At next merge request, I added service layer to application. Service layer already not work \
  with immutable entity classes. It works with mutable DTO classes. Because of this, I wrote mapper classes, \
  which convert DTO classes to Entity and back. To test service layer, separate of DAO layer, I created mocks of \
  dao classes. For this task I used Mockito framework.

commit.four.description = Further, I added Lombok to my application. This action allowed me delete more than 2000 lines. \
  I removed all manually written getters, setters, constructors, builders, equals and hash code overriding. \
  I still remember how fun was to remove boilerplate code.

commit.five.description = At next step I became acquainted with Docker. At this commit, \
  I use Docker only for putting my database inside container.

commit.six.description = Next few commits I was adding web user interface. One or two controllers in one commit. \
  The right link refers you to last commit of this bunch. At this phase I don`t used Spring Boot, against it \
  I used Spring MVC. To transfer app data to web I used Thymeleaf. Also, I used Bootstrap templates to make UI looks better.

commit.seven.description = Further, was added internationalization. Thanks to this, you can read this text \
  and explore all application on two languages.

commit.eight.description = After it, my mentor acquainted me with MapStruct. \
  And I rewrote all mappers using this technology.

commit.nine.description = At next step, I worked with security of my application. For this task I, of course, \
  used Spring Security. I created additional tables at my database, which contain information about users \
  roles and privileges of these roles. In my application users are divided by rights into three types. \
  Role student have only read privilege. Role professor have also written privilege. Admin role has additional delete privilege.

commit.ten.description = Further, I separated my project into four modules. This are data, client, service and UI. \
  Data module is about work with data base. Client module contain interfaces of service classes and DTO classes, \
  this module was conceived as a contract that needs to be implemented to work with the data module. \
  Service module just implements contract declared at client module. And finally, UI module which contain controllers \
  and views for interaction with user.

commit.eleven.description = Next time I did several things. First, I have added an extra module called coverage, \
  just to see level of test coverage with JaCoCo. Second, I have put application into two docker container. \
  In one container I have put my database, in second I put application war file. Third thing that \
  I did was getting data source from via JNDI.

commit.twelve.description = Next step was migrating from Spring-JDBC to Hibernate. It may look strange but \
  I didn't get the expected pleasure. Hibernate takes on a lot and sometimes it's harder to find a bug than in the good old Spring-JDBC.

commit.thirteen.description = Continuing to reduce the count of lines of code in the application, the next step was \
  switching from Spring-MVC to Spring-Boot. It felt really cool.

commit.fourteen.description = Further step was migrating from Hibernate to Spring Data JPA, and additionally add \
  layered jar file in docker. Container began starting perceptibly faster.

commit.fifteen.description = At next step I filled views of application by texts. And deployed it on Amazon Web Service.\
   Unfortunately, I don't know if this foreign service will accept my Visa card at next month, \
  so the application is probably already deployed on Yandex Cloud.

commit.sixteen.description = As a final step, I plan to change backend validation from manually catching \
  exceptions and redirecting to the error page to the Hibernate validation bean.

#login
please.sign.in = Please, sign in
help.to.login = You can log in as a student using email: "student@gmail.com" and password: "student". \
  Student have only read privileges
invalid.email.or.password = Invalid email or password

#registration
i.am.student = I`m student
i.am.professor = I`m professor
start.registration = Start registration

#departments
all.departments = All departments
professors.of.department = Professors of department
courses.of.department = Courses of department
groups.of.department = Groups of department
department.delete.warning = Be careful! All professors of this department lose their department, same about courses and groups!
update.of.department = Update of department of
update.department = Update department
name.of.department = Name of department
enter.new.department.name = Enter new name of department
choose.professor.for.adding.to.department = Choose professor for adding to department
add.professor.to.department = Add professor to department
choose.professor.for.removing.from.department = Choose professor for removing from department
remove.professor.from.department = Remove professor from department
choose.course.for.adding.to.department = Choose course for adding to department
add.course.to.department = Add course to department
choose.course.for.removing.from.department = Choose course for removing from department
remove.course.from.department = Remove course from department
choose.group.for.adding.to.department = Choose group for adding to department
add.group.to.department = Add group to department
choose.group.for.removing.from.department = Choose group for removing from department
remove.group.from.department = Remove group from department
registration.new.department = Registration of a new department
enter.name.new.department = Enter name of new department
add.new.department = Add new department
department.have.no.professors = This department have no professors yet
department.have.no.courses = This department have no courses yet
department.have.no.groups = This department have no groups yet

#courses
all.courses = All courses
teachers.of.course = Teachers of course
course.delete.warning = Be careful, all lessons of this course will lose course
update.of.course = Update of course of
update.course = Update course
name.of.course = Name of course
enter.new.course.name = Enter new name of course
department.of.course = Department of course
choose.professor.for.adding.to.course = Choose professor for adding to course teachers
add.professor.to.course = Add professor to course teachers
choose.professor.for.removing.from.course = Choose professor for removing form course teachers
remove.professor.from.course = Remove professor from course teachers
registration.new.course = Registration of a new course
enter.name.new.course = Enter name of new course
add.new.course = Add new course
choose.department.of.new.course = Choose department of new course
course.have.no.teachers = This course have no teachers yet

#groups
all.groups = All groups
timetable.for.group = Timetable for group
students.of.group = Students of group
group.delete.warning = Be careful, all students will be remove from group, and lessons of this group will lose group
update.of.group = Update of group
update.group = Update group
name.of.group = Name of group
enter.new.group.name = Enter new name of group
department.of.group = Department of group
form.of.education.of.group = Form of education of group
choose.student.for.adding.to.group = Choose student for adding to group
add.student.to.group = Add student to group
choose.student.for.removing.from.group = Choose student for removing form group
remove.student.from.group = Remove student from group
registration.new.group = Registration of a new group
enter.name.new.group = Enter name of new group
choose.form.of.education.of.new.group = Choose form of education of new group
choose.department.of.new.group = Choose department of new group
add.new.group = Add new group
group.have.no.students = This group have no students yet

#professors
all.professors = All professors
timetable.for.professor = Timetable for professor
professor.delete.warning = Be careful, all lessons taught by this professor will be left without a teacher
courses.of.professor = Courses of professor
update.of.professor = Update data of professor
enter.new.professor.first.name = Enter new first name of professor
enter.new.professor.last.name = Enter new last name of professor
enter.new.professor.email = Enter new email of professor
enter.new.professor.password = Enter new password of professor
first.name.of.professor = First name of professor
last.name.of.professor = Last name of professor
email.of.professor = Email of professor
password.of.professor = Password of professor
science.degree.of.professor = Science degree of professor
department.of.professor = Department of professor
update.professor = Update information about professor
course.list.of.professor = Course list of professor
current.course.list = Current course list
choose.course.for.adding.to.list = Choose course for adding to course list of professor
add.course.to.list = Add course to course list of professor
choose.course.for.removing.from.list = Choose course for removing form course list of professor
remove.course.from.list = Remove course from course list of professor
registration.new.professor = Registration of a new professor
choose.department.of.new.professor= Choose department of new professor
choose.science.degree.of.new.professor = Choose science degree of new professor
add.new.professor = Register new professor
professor.have.no.courses = This professor have no courses for teaching yet

#students
all.students = All students
timetable.for.student = Timetable for student
update.of.student = Update data of student
enter.new.student.first.name = Enter new first name of student
enter.new.student.last.name = Enter new last name of student
enter.new.student.email = Enter new email of student
enter.new.student.password = Enter new password of student
first.name.of.student = First name of student
last.name.of.student = Last name of student
email.of.student = Email of student
password.of.student = Password of student
group.of.student = Group of student
update.student = Update information about student
exclude.student.from.group = Exclude student from group
registration.new.student = Registration of a new student
choose.group.of.new.student = Choose group of new student
add.new.student = Register new student

#lessons
all.lessons = All lessons
update.of.lesson = Update of lesson
enter.new.date.and.time.of.start.lesson = Enter new date and time of start lesson
date.time.of.start.lesson = Date and time of start lesson
course.of.lesson = Course of lesson
group.of.lesson = Group of lesson
teacher.of.lesson = Teacher of lesson
from.of.lesson = From of lesson
update.lesson = Update information about lesson
registration.of.new.lesson = Registration of a new lesson
enter.date.and.time.of.start.new.lesson = Enter date and time of start new lesson
choose.course.of.new.lesson = Choose course of new lesson
choose.group.of.new.lesson = Choose group of new lesson
choose.professor.of.new.lesson = Choose teacher of new lesson
choose.form.of.new.lesson = Choose form of new lesson
add.new.lesson = Register new lesson

#form of lesson
all.forms.of.lesson = All forms of lesson
duration = Duration
form.of.lesson.delete.warning = Be careful, all lessons with current form of lesson will lose form of lesson
update.of.form.of.lesson = Update of form of lesson
name.of.form.of.lesson = Name of form of lesson
enter.new.name.of.form.of.lesson = Enter new name of form of lesson
duration.of.form.of.lesson = Duration of form of lesson
enter.new.duration.of.form.of.lesson = Enter new duration of form of lesson (in minutes)
update.forms.of.lesson = Update form of lesson
registration.new.form.of.lesson = Registration of a new form of lesson
enter.name.of.new.form.of.lesson = Enter name of new form of lesson
enter.duration.of.new.form.of.lesson = Enter duration of new form of lesson (in minutes)
add.new.form.of.lesson = Register new form of lesson

#form of education
all.forms.of.education = All forms of education
groups.of.current.form.of.education = Groups of current form of education
form.of.education.delete.warning = Be careful, all groups with current form of education will lose form of education
update.of.form.of.education = Update of form of education
name.of.form.of.education = Name of form of education
enter.new.name.of.form.of.education = Enter new name of form of education
update.forms.of.education = Update form of education
choose.group.for.adding.to.form.of.education = Choose group for adding to this form of education
add.group.to.form.of.education = Add group to this form of education
choose.group.for.removing.from.form.of.education = Choose group for removing form this form of education
remove.group.from.form.of.education = Remove group from this form of education
registration.new.form.of.education = Registration of a new form of education
enter.name.of.new.form.of.education = Enter name of new form of education
add.new.form.of.education = Register new form of education
form.of.education.have.no.groups = This form of education have no groups yet